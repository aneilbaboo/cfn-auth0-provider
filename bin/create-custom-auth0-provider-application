#!/bin/bash


CLIENT_ID=
CLIENT_SECRET=
AWS_DEFAULT_PROFILE=
AWS_DEFAULT_REGION=
AWS_REGION=
AUTH0_AUTHZ_API=

function usage {
	echo "Usage: $(basename $0) 
		-d <auth0 domain>
		-u <auth0 authorizatione extension url>
		-p <aws profile>
		-r <aws region>" >&2
	echo "	$@" >&2
	exit 1
}

function main {
    while getopts ":d:t:u:p:r:" OPT; do
	case "$OPT" in
	    d)
		AUTH0_DOMAIN=${OPTARG/https\:\/\//}
		[[ -z $AUTH0_AUTHZ_API ]] && AUTH0_AUTHZ_API=https://${AUTH0_DOMAIN/.auth0.com/.webtask.io}/adf6e2f2b84784b57522e3b19dfc9201
		;;
	    u)
		AUTH0_AUTHZ_API="$OPTARG"
		;;
	    p)
		AWS_DEFAULT_PROFILE="$OPTARG"
		;;
	    r)
		AWS_DEFAULT_REGION="$OPTARG"
		AWS_REGION="$OPTARG"
		;;
	    *)
	       usage
		;;
	esac
    done
    [[ -z $(which jq) ]] && usage "ERROR: jq is not installed">&2
    [[ -z $AUTH0_DOMAIN ]] && usage "ERROR: Auth0 domain (-d) not set" >&2
    [[ -z $AUTH0_API_TOKEN ]] && usage "ERROR: environment variable AUTH0_API_TOKEN not set" >&2
    [[ -z $AWS_DEFAULT_PROFILE ]] && usage "ERROR: AWS profile (-p) is missing" >&2
    [[ -z $AWS_REGION ]] && usage "ERROR:AWS Region (-r) is missing" >&2 
    [[ -z $AUTH0_AUTHZ_API ]] && usage "ERROR: Authorization Extention URL is missing (-u)" >&2 


    
	get_or_create_app
	grant_mngmt_api_access
	grant_authz_api_access
	store_credentials
}

function get_or_create_app {
    get_app
    if [[ -z $CLIENT_ID ]] ; then
	create_app
    fi
}

function get_app {
	APP=$(curl -sS -H "authorization: bearer $AUTH0_API_TOKEN" \
	     -H 'content-type: application/json' \
	     -X GET  https://$AUTH0_DOMAIN/api/v2/clients  | jq ' .[] | select(.name == "Auth0 CloudFormation Provider") | .' )
	CLIENT_ID=$(jq -r .client_id <<< $APP)
	CLIENT_SECRET=$(jq -r .client_secret <<< $APP)
	[[ -n $CLIENT_ID ]] && [[ -z $CLIENT_SECRET ]] && echo "ERROR: application Auth0 CloudFormation Provider exists, but cannot read secret" && exit 1
}

function create_app {
	APP=$(curl -sS -H "authorization: bearer $AUTH0_API_TOKEN" \
	     -H 'content-type: application/json' \
	     -X POST \
	     -d '{ "name": "Auth0 CloudFormation Provider", "app_type": "non_interactive", "jwt_configuration": { "lifetime_in_seconds": 300 } }' \
	     https://$AUTH0_DOMAIN/api/v2/clients 
)
	CLIENT_ID=$(jq -r .client_id <<< $APP)
	CLIENT_SECRET=$(jq -r .client_secret <<< $APP)

	[[ -z $CLIENT_ID ]] && echo "ERROR: failed to obtain client id" >&2 && exit 1
	[[ -z $CLIENT_SECRET ]] && echo "ERROR: failed to obtain client secret" >&2 && exit 1
}

function grant_mngmt_api_access {
	CLIENT_GRANT=$(cat <<!
{
    "client_id": "$CLIENT_ID",
    "audience": "https://$AUTH0_DOMAIN/api/v2/",
    "scope": [
      "read:email_provider",
      "create:email_provider",
      "delete:email_provider",
      "update:email_provider",
      "read:client_grants",
      "create:client_grants",
      "delete:client_grants",
      "update:client_grants",
      "read:client_keys",
      "read:clients",
      "update:clients",
      "delete:clients",
      "create:clients",
      "read:connections",
      "update:connections",
      "delete:connections",
      "create:connections",
      "read:resource_servers",
      "update:resource_servers",
      "delete:resource_servers",
      "create:resource_servers",
      "read:rules",
      "update:rules",
      "delete:rules",
      "create:rules",
      "read:users",
      "update:users",
      "delete:users",
      "create:users"
    ]
}
!
)
	create_or_update_client_grant "$CLIENT_GRANT"
}

function grant_authz_api_access {
	CLIENT_GRANT=$(cat <<!
{
    "client_id": "$CLIENT_ID",
    "audience": "urn:auth0-authz-api",
    "scope": [
      "read:users",
      "read:applications",
      "read:connections",
      "read:groups",
      "create:groups",
      "update:groups",
      "delete:groups",
      "read:roles",
      "create:roles",
      "update:roles",
      "delete:roles",
      "read:permissions",
      "create:permissions",
      "update:permissions",
      "delete:permissions",
      "read:resource-server",
      "create:resource-server",
      "update:resource-server",
      "delete:resource-server"
    ]
}
!
)
	create_or_update_client_grant "$CLIENT_GRANT"
}

function create_or_update_client_grant {
	GRANT="$@"
	AUDIENCE=$(jq -r .audience <<< $GRANT)
	CLNT_ID=$(jq -r .client_id <<< $GRANT)
	GRANT_ID=$(curl -sS -H "authorization: Bearer $AUTH0_API_TOKEN" -X GET https://$AUTH0_DOMAIN/api/v2/client-grants | \
		jq --arg client_id "$CLNT_ID" --arg audience "$AUDIENCE" -e -r '.[] | select(.client_id == $client_id and .audience == $audience) | .id')
	if [[ -z $GRANT_ID ]] || [[ $GRANT_ID == "null" ]] ; then
		curl -sS \
		     -H "authorization: Bearer $AUTH0_API_TOKEN" \
		     -H 'content-type: application/json' \
		     -X POST \
		     -d @- \
		     https://$AUTH0_DOMAIN/api/v2/client-grants  <<< "$CLIENT_GRANT"
	else
		CLIENT_GRANT=$(jq 'del(.audience) | del(.client_id)' <<< $CLIENT_GRANT)
		curl -sS \
		     -H "authorization: Bearer $AUTH0_API_TOKEN" \
		     -H 'content-type: application/json' \
		     -X PATCH \
		     -d @- \
		     https://$AUTH0_DOMAIN/api/v2/client-grants/$GRANT_ID <<< "$CLIENT_GRANT"
	fi
}


function store_credentials {
read -r -d '' VALUE <<!
{
        "Name": "/cfn-auth0-provider/authorization_url",
        "Type": "String",
        "Value": "${AUTH0_AUTHZ_API}",
        "Overwrite": true
}
!
   aws ssm --region $AWS_REGION put-parameter --name /cfn-auth0-provider/domain --type SecureString --value=$AUTH0_DOMAIN --overwrite
   aws ssm --region $AWS_REGION put-parameter --name /cfn-auth0-provider/client_id --type String --value=$CLIENT_ID --overwrite
   aws ssm --region $AWS_REGION put-parameter --name /cfn-auth0-provider/client_secret --type SecureString --value=$CLIENT_SECRET --overwrite
   aws ssm --region $AWS_REGION put-parameter --cli-input-json "$VALUE"
}

main "$@"
